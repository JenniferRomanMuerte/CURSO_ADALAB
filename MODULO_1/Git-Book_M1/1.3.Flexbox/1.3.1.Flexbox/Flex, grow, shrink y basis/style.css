/*
 ðŸ”¹ 1. flex-grow
    Indica cuÃ¡nto puede crecer un elemento cuando sobra espacio en el contenedor.

    - flex-grow: 0 â†’ no crece nunca, mantiene su tamaÃ±o base.

    - flex-grow: 1 â†’ crece para ocupar el espacio libre disponible.

    - flex-grow: 2 â†’ crece el doble que otro elemento con flex-grow: 1.

 ðŸ”¹ 2. flex-shrink
    Indica cuÃ¡nto puede encogerse un elemento cuando no hay espacio suficiente.

    - flex-shrink: 0 â†’ nunca se encoge, puede desbordar.

    - flex-shrink: 1 â†’ sÃ­ se encoge para intentar encajar.

    - flex-shrink: 2 â†’ se encoge el doble que otro con 1.

 ðŸ”¹ 3. flex-basis
    Es el tamaÃ±o base inicial del elemento (como un width inicial dentro de flex).
    - Puede ser px, %, auto, etc. De esta manera le damos un tamaÃ±o inicial fijo
    - Podemos poner su valor en auto â†’
      Respeta el tamaÃ±o natural del contenido antes de repartir.
      Es decir: si una caja tiene un texto largo y otra corto, la larga empieza mÃ¡s grande y luego crece/reduce.

    - Podemos poner su valor en: 0 â†’
      Ignora el tamaÃ±o natural y reparte todo el espacio.

 ðŸ”¹ 4. El atajo flex

    Se combina asÃ­:
    flex: grow shrink basis;

*/

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
html,
body {
  height: 100%; /* Para que el flex padre ocupe toda la pantalla */
  font-size: 62.5%;
}

body {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

header {
  padding: 2rem;
  background-color: grey;
}

main {
  flex:  1 1 0; /* ðŸ”‘ ocupa todo el espacio libre */
  background: bisque;
  padding: 2rem;
}
footer {
  padding: 2rem;
  background-color: rgb(255, 187, 0);
}


/*
üîë Clave de por qu√© div1 necesita position: relative

Cuando un hijo tiene position: absolute,
busca el primer padre con position distinto de static (por defecto todos son static).

Si no lo encuentra, se posiciona respecto al <body>.

Como queremos que las cajas se superpongan dentro de div1,
tenemos que marcar div1 { position: relative; }.
üëâ Eso convierte a div1 en el ‚Äúreferente‚Äù de posicionamiento para div2 y div3.*/


/*
Quitamos m√°rgenes y paddings por defecto de todos los elementos
y activamos box-sizing: border-box para que
el tama√±o declarado incluya padding y borde.
*/
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/*
Convertimos el <body> en un contenedor flex.
As√≠ podemos centrar el contenido
tanto vertical como horizontalmente.
*/
body {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh; /* toda la altura de la pantalla */
}

/*
div1 es la caja amarilla (500x500).
Le ponemos position: relative para que
div2 y div3 que tendr√°n position: absolute se posici√≥n con respecto a √©l
‚Üí Esto hace que sus coordenadas (top/left) se calculen
respecto a div1 y no respecto al <body>.
*/
.div1 {
  position: relative;
  width: 500px;
  height: 500px;
  background-color: yellow;
  border: 2px solid black;
  padding: 40px;
}

/*
div2 es la caja verde (300x300).
Le ponemos position: absolute para que
se coloque en la esquina superior izquierda de div1,
gracias a que div1 es relative.
As√≠ queda encima del amarillo.
*/
.div2 {
  position: absolute;
  width: 300px;
  height: 300px;
  background-color: green;
  padding: 75px;
}

/*
div3 es la caja azul (150x150).
Tambi√©n est√° absolute dentro de div2,
as√≠ queda encima del verde.
Le a√±adimos un borde punteado de 20px.
*/
.div3 {
 position: absolute;
  width: 150px;
  height: 150px;
  background-color: blue;
  border: 20px solid black;
}
